!<arch>
0-isupper.c/    0           0     0     644     187       `
#include "main.h"

/**
 * _isupper - uppercase letters
 * @c: char to check
 *
 * Return: 0 or 1
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     315       `
#include "main.h"
/**
 * _memset - fill a block of memory
 * @s: starting address of memory
 * @b: the desired value
 * @n: member of bytes to be changed
 *
 * Return: Always value
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		*(s + i) = b;
		i++;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     343       `
#include "main.h"

/**
 **_strcat - cocatenates two strings
 * @dest: pointer destination
 * @src: pointer source
 * Return: void
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
		i++;

	/*i -= 1;*/
	for (j = 0; src[j] != '\0'; j++)
	{
		dest[i] =  src[j];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     398       `
#include "main.h"

/**
 * _atoi - converts string to integer
 * @s: contains a tring passed to  a function to be converted
 * Return: 0 or a convareted integer from string
 */

int _atoi(char *s)
{
	int a = 1;
	unsigned int b = 0;

	do {
		if (*s == '-')
			a *= -1;

		else if (*s >= '0' && *s <= '9')
			b = (b * 10) + (*s - '0');

		else if (b > 0)
			break;
	} while (*s++);
	return (b * a);
}
1-isdigit.c/    0           0     0     644     217       `
#include "main.h"

/**
 * _isdigit - check if an argument is digit
 * @c: an integer argument
 *
 * Return: 0 or 1
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     363       `
#include "main.h"
/**
 * _memcpy - a function that copies memory area
 * @dest: memory where is stored
 * @src: memory where is copies
 * @n: member of bytes
 *
 * Return: copied memory with n byted changed
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int r = 0;
	int i = n;

	for (; r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     391       `
#include "main.h"

/**
 * *_strncat - concatenate two strings
 * using at most n bytes from src
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: Always 0
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
		i++;

	for (j = 0; src[j] != '\0' && j < n; j++)
	{
		dest[i] = src[j];
		i++;
	}
	dest[i] = '\0';
	return (0);
}

2-strchr.c/     0           0     0     644     237       `
#include "main.h"
/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (success)
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     255       `
#include "main.h"

/**
 * _strlen - function that returns the length of a string
 *
 * @s: this is the input string
 *
 * Return: Length of string
 */
int _strlen(char *s)
{
	int index;

	for (index = 0; s[index] != '\0' ; index++)
		;
	return (index);
}

2-strncpy.c/    0           0     0     644     333       `
#include "main.h"

/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}

	return (dest);

}

3-islower.c/    0           0     0     644     177       `
#include "main.h"

/**
 * _islower - check for lower case letter
 * @c : character to check the case
 * Return:0 or 1
 */
int _islower(int c)
{
	return (c >= 97 && c <= 122);
}

3-puts.c/       0           0     0     644     177       `
#include "main.h"

/**
 * _puts - prints a string,followed  by a new line,to stdout
 * @str: this is my input string
 * Return: void
 */

void _puts(char *str)
{
	_puts(str);
}

3-strcmp.c/     0           0     0     644     302       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: first argument
 * @s2: second argument
 * Return: an integer
 */

int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; *s1 == *s2; i++)
	{
		if (s1[i] == '\0' && s2[i] == '\0')
			return (0);
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     372       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s:  input
 * @accept: input
 * Return: Always 0 (success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}
4-isalpha.c/    0           0     0     644     195       `
#include "main.h"

/**
 * _isalpha - check for lower case letter
 * @c : character to check
 * Return:0 or 1
 */

int _isalpha(int c)
{
	return ((c >= 97 && c <= 122) || (c >= 65 && c <= 90));
}

4-strpbrk.c/    0           0     0     644     451       `
#include "main.h"
#include <stdio.h>
/**
 * _strpbrk - print the consecutive character of s1 that are inn s2
 * @s: source string
 * @accept: seaching string
 *
 * Return: new string
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; *(s + i); i++)
	{
		for (j = 0; *(accept + j); j++)
		{
			if (*(s + i) == *(accept + j))
			{
				break;
			}
		}
		if (*(accept + j) != '\0')
		{
			return (s + i);
		}
	}
	return (0);
}


5-strstr.c/     0           0     0     644     565       `
#include "main.h"

/**
 * _strstr - first occurrence of the substring needle in the string haystack
 * @haystack: main str to be examined
 * @needle: searched in hystack
 * Return: return 0
 *
 */

char *_strstr(char *haystack, char *needle)
{
	char *str1, *str2; /*Declaring variables*/

	while (*haystack != '\0')
	{
		str1 = haystack; /*values*/
		str2 = needle;

		/*star WHILE*/
		while (*haystack != '\0' && *str2 != '\0' && *haystack == *str2)
		{
			haystack++;
			str2++;
		}
		if (*str2 == '\0')
			return (str1);
		haystack = str1 + 1;
	}
	return (0);
}

6-abs.c/        0           0     0     644     149       `
#include "main.h"

/**
 * _abs - return abs value
 * @n : number to checck
 * Return:0 or 1
 */

int _abs(int n)
{

	return (n >= 0 ? n : n * -1);
}

9-strcpy.c/     0           0     0     644     323       `
#include "main.h"

/**
 * _strcpy - copiar el  contenido de uno a otra variable
 * @dest: This is destiny
 * @src: This is copia
 *
 * Return: This return copy
 */

char *_strcpy(char *dest, char *src)
{
	char *start = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (start);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

